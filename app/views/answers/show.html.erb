<div class="container-fluid">
  <div class="row">
    <div class="col-md-12">
      <h1> 問<%= @answer.order %>/72</h1>
    </div>
  </div>

  <div class="container col-md-6">
    <section>
      <div class="webgl-container" id="webgl-container"></div>

      <span class="progress_bar">
        <div class="progress col-sm-12">
          <div class="progress-bar"></div>
        </div>
      </span>
    </section>
  </div>

  <div class="questions col-md-6">
    <%= form_for(@answer) do |f| %>
      <div class="error_text"><%= flash[:error] %></div>
      <div class="col-sm-12">
        <p style="font-size: 24px">アンケート回答欄</p>
        <ul class="list-group">
          <div class="question">
            Q1.  自然な動作にみえた
          </div>
          <div class="likert text-center">
            <div class="question" style="display:inline">全くそう思わない</div>
            <%= f.radio_button :eval1, '1', class: "radio_button" %>
            <%= f.radio_button :eval1, '2', class: "radio_button" %>
            <%= f.radio_button :eval1, '3', class: "radio_button" %>
            <%= f.radio_button :eval1, '4', class: "radio_button" %>
            <%= f.radio_button :eval1, '5', class: "radio_button" %>
            <%= f.radio_button :eval1, '6', class: "radio_button" %>
            <%= f.radio_button :eval1, '7', class: "radio_button" %>
            <div class="question" style="display:inline">とてもそう思う</div>
          </div>
        </ul>
        <ul class="list-group">
          <div class="question">
            Q2.  滑らかな動作にみえた
          </div>
          <div class="likert text-center">
            <div class="question" style="display:inline">全くそう思わない</div>
            <%= f.radio_button :eval2, '1', class: "radio_button" %>
            <%= f.radio_button :eval2, '2', class: "radio_button" %>
            <%= f.radio_button :eval2, '3', class: "radio_button" %>
            <%= f.radio_button :eval2, '4', class: "radio_button" %>
            <%= f.radio_button :eval2, '5', class: "radio_button" %>
            <%= f.radio_button :eval2, '6', class: "radio_button" %>
            <%= f.radio_button :eval2, '7', class: "radio_button" %>
            <div class="question" style="display:inline">とてもそう思う</div>
          </div>
        </ul>
        <ul class="list-group">
          <div class="question">
            Q3.  違和感のない動作にみえた
          </div>
          <div class="likert text-center">
            <div class="question" style="display:inline">全くそう思わない</div>
            <%= f.radio_button :eval3, '1', class: "radio_button" %>
            <%= f.radio_button :eval3, '2', class: "radio_button" %>
            <%= f.radio_button :eval3, '3', class: "radio_button" %>
            <%= f.radio_button :eval3, '4', class: "radio_button" %>
            <%= f.radio_button :eval3, '5', class: "radio_button" %>
            <%= f.radio_button :eval3, '6', class: "radio_button" %>
            <%= f.radio_button :eval3, '7', class: "radio_button" %>
            <div class="question" style="display:inline">とてもそう思う</div>
          </div>
        </ul>

        <ul class="list-group">
          <div class="question">
            Q4.  アバタの動作から動画の動作を連想できた
          </div>
          <div class="likert text-center">
            <div class="question" style="display:inline">全くそう思わない</div>
            <%= f.radio_button :eval3, '1', class: "radio_button" %>
            <%= f.radio_button :eval3, '2', class: "radio_button" %>
            <%= f.radio_button :eval3, '3', class: "radio_button" %>
            <%= f.radio_button :eval3, '4', class: "radio_button" %>
            <%= f.radio_button :eval3, '5', class: "radio_button" %>
            <%= f.radio_button :eval3, '6', class: "radio_button" %>
            <%= f.radio_button :eval3, '7', class: "radio_button" %>
            <div class="question" style="display:inline">とてもそう思う</div>
          </div>
        </ul>

      <div style="display: table; width: 100%;">      
        <span class="submit_button">
          <%= f.submit "送信して次へ", class: "btn btn-info" %>
        </span>
      </div>
    </div>
  <% end%>
</div>
<script>

  // containers 
  container = document.getElementById('webgl-container');

  // variables for threejs
  var clock = new THREE.Clock();
  var webglcamera, scene, webglrenderer;
  var webglwidth = 640;
  var webglheight = 480;
  var loader,mesh;
  var gesture_count1 = document.getElementById('gesture_count1');

  var vivi = [];
  var vuvu = [];
  var count = 0;
  var current_frame = 0;
  var end_frame = 0;
  var spotlight = new Array(3);

  var gesture_file_1, model_data;
  var scale=1;


  model_data = "/model/50s_politician4v2_noglow.js";
  // variables for file handling
  var file_number = <%= @answer.motion_id %>;
  var side_number = <%= @answer.side_id %>;
  if( <%= @answer.gesture_type %> == 0 ){
    gesture_file_1 = "/data/kinect_" + file_number + "_" + side_number + ".csv";
  } else if ( <%= @answer.gesture_type %> == 1 ){
    gesture_file_1 = "/data/predicted_" + file_number + "_" + side_number + ".csv";
  } else if ( <%= @answer.gesture_type %> == 2 ){
    gesture_file_1 = "/data/mocap_" + file_number + "_" + side_number + ".csv";
  }
  
  console.log( gesture_file_1 );

  // main procedure
  init();

  // csvファイルを読み込み、配列にして返す
  // return motion[frame][ 25関節 x quaternion(x, y, z, w) ]
  function load_csv(filename){
    var csvData = new Array();
    var data = new XMLHttpRequest();
    data.open("GET", filename, false); //true:非同期,false:同期
    data.send(null);

    var LF = String.fromCharCode(10); //改行ｺｰﾄﾞ
    var lines = data.responseText.split(LF);
    for (var i = 0; i < lines.length;++i) {
      var cells = lines[i].split(",");
      if( cells.length != 1 ) {
        csvData.push(cells);
      }
    }
    return csvData;
  }

  function boneinvert() {
    var Xaxis = new THREE.Vector3(1, 0, 0);
    var Yaxis = new THREE.Vector3(0, 1, 0);
    var Zaxis = new THREE.Vector3(0, 0, 1);
    var angle = -Math.PI / 2;

    for (var i = 0; i < 20; i++) {
      vivi[i] = new THREE.Quaternion();
      vuvu[i] = new THREE.Quaternion();
    }

    vivi[0].setFromAxisAngle(Yaxis, Math.PI);
    vivi[4].setFromAxisAngle(Zaxis, -angle);
    vivi[8].setFromAxisAngle(Zaxis, angle);
    vivi[12].setFromAxisAngle(Zaxis, -angle);
    vivi[13].setFromAxisAngle(Zaxis, -angle);
    vivi[15].setFromAxisAngle(Xaxis, -angle);
    vivi[16].setFromAxisAngle(Zaxis, angle);
    vivi[17].setFromAxisAngle(Zaxis, angle);
    vivi[19].setFromAxisAngle(Xaxis, -angle);
    vuvu[0].setFromAxisAngle(Yaxis, Math.PI);
    vuvu[5].setFromAxisAngle(Zaxis, angle);
    vuvu[6].setFromAxisAngle(Zaxis, angle);
    vuvu[7].setFromAxisAngle(Zaxis, angle);
    vuvu[9].setFromAxisAngle(Zaxis, -angle);
    vuvu[10].setFromAxisAngle(Zaxis, -angle);
    vuvu[11].setFromAxisAngle(Zaxis, -angle);
    vuvu[13].setFromAxisAngle(Zaxis, angle);
    vuvu[14].setFromAxisAngle(Zaxis, angle * 2);
    vuvu[15].setFromAxisAngle(Zaxis, angle * 2);
    vuvu[17].setFromAxisAngle(Zaxis, -angle);
    vuvu[18].setFromAxisAngle(Zaxis, -angle * 2);
    vuvu[19].setFromAxisAngle(Zaxis, -angle * 2);
  }


  // functions
  function init() {
    boneinvert();

    webglrenderer = new THREE.WebGLRenderer({ antialias: true });
    webglrenderer.setClearColor(new THREE.Color(0xFFFFFF, 0));
    webglrenderer.setSize(webglwidth, webglheight);
    webglrenderer.shadowMapEnabled = true;
    webglrenderer.shadowMapType = THREE.PCFSoftShadowMap;
    container.appendChild(webglrenderer.domElement);


    webglcamera = new THREE.PerspectiveCamera(40, webglwidth / webglheight, 1, 12000);
    webglcamera.position.set(0, 10, 30);
    scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2(0xfff4e5, 0.00003);

    for (var i = 0; i < 3; i++) {
      spotlight[i] = new THREE.SpotLight(0xffffff);
      spotlight[i].angle = Math.PI / 3;
      spotlight[i].castShadow = true;
      spotlight[i].shadowMapWidth = 2048;
      spotlight[i].shadowMapHeight = 2048;
      spotlight[i].shadowBias = 0.0001;
      spotlight[i].shadowDarkness = 0.8;
      spotlight[i].shadowCameraNear = 10;
      spotlight[i].shadowCameraFar = 1000;
      spotlight[i].shadowCameraFov = 90;
      spotlight[i].position.set(i*300-300, 0, 100);
      spotlight[i].intensity = 1.0;
      scene.add(spotlight[i]);
    }

    // var material = new THREE.MeshBasicMaterial( { color: 0x000000 } );
    // var geometry = new THREE.CircleGeometry( 0.4, 8 );
    // joint = new THREE.Mesh( geometry, material );
    // joint.position.set(0, 0, 0);
    // scene.add(joint);

    loader = new THREE.JSONLoader();
    loader.load(model_data, function(geometry, mats) {

      mats.forEach(function(mat) {
        mat.skinning = true;
        //mat.morphTargets = true;
      });

      // (1) csvデータの読み込み
      motion_data = load_csv(gesture_file_1);
      // (2) frameの長さを合わせる
      end_frame = motion_data.length;
      // (3) meshの準備
      mesh = new THREE.SkinnedMesh(geometry, new THREE.MeshFaceMaterial(mats));
      mesh.skeleton.bones[0].position.set(0, 0, 0);
      mesh.scale.set(1*scale, 1*scale, 1*scale);
      mesh.castShadow = true;
      scene.add(mesh);
      webglcamera.lookAt(mesh.position);

      
      render();
    });
  }


  // kinect -> three の変換メソッド
  function convert_kinect_to_three( quaternionArray, mesh ) {

    var norot = new THREE.Quaternion().set(0,0,0,0); // SL
    var erot = new THREE.Quaternion().set(0,0,0,1); // SL

    // // (1) 25関節分のquaternionに分け、文字列をfloatに変換する
    var kinectAbs_rotq = new Array(25);
    var tmp = new Array(25);
    for (var i = 0; i < quaternionArray.length/4; i++) {
      kinectAbs_rotq[i] = new THREE.Quaternion().set( parseFloat(quaternionArray[i*4]),
                                                      parseFloat(quaternionArray[i*4+1]),
                                                      parseFloat(quaternionArray[i*4+2]),
                                                      parseFloat(quaternionArray[i*4+3]));
    }

    // 以下、kinect -> three

    // 1. kinect-abs -> three-abs: 座標系変換
    // 全部一緒
    var kinectAbsToThreeAbs_rotq = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, 0, "XYZ"));

    // 配列の定義
    var three_rotq = new Array(25);
    for (var i = 0; i < three_rotq.length; i++) {
      if (!kinectAbs_rotq[i]) continue;
      var tmp_rot = new THREE.Vector3( kinectAbs_rotq[i].x, kinectAbs_rotq[i].y, kinectAbs_rotq[i].z );
      tmp_rot.applyQuaternion( kinectAbsToThreeAbs_rotq );
      three_rotq[i] = new THREE.Quaternion( tmp_rot.x, tmp_rot.y, tmp_rot.z, kinectAbs_rotq[i].w );
    }

    // 2. three_obj -> kinect-obj: オブジェクト変換 e.g. SL: (1,0,0) -> (0,1,0)
    //     &  y軸回り180度を除去
    var threeObjToKinectObj = new Array(25);
    threeObjToKinectObj[0] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, 0, "XYZ")); // SpineBase
    threeObjToKinectObj[1] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, 0, "XYZ")); // SpineMid
    threeObjToKinectObj[20] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, 0, "XYZ")); // SpineShoulder (as ShoulderCenter)
    threeObjToKinectObj[2] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, 0, "XYZ")); // Neck
    threeObjToKinectObj[3] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0, "XYZ")); // Face (as Head)


    threeObjToKinectObj[4] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, Math.PI / 2, "XYZ")); // ShoulderLeft --- 0が入るべき
    threeObjToKinectObj[5] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI + Math.PI / 2, Math.PI / 2, "XYZ")); // ElbowLeft
    threeObjToKinectObj[6] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, Math.PI / 2, "XYZ")); // WristLeft
    threeObjToKinectObj[7] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, Math.PI / 2, "XYZ")); // WristLeft


    threeObjToKinectObj[8] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, -Math.PI / 2, "XYZ")); // ShoulderRight --- 0が入るべき
    threeObjToKinectObj[9] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -Math.PI - Math.PI / 2, -Math.PI / 2, "XYZ")); // ElbowRight
    threeObjToKinectObj[10] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, -Math.PI / 2, "XYZ")); // WristRight
    threeObjToKinectObj[11] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, -Math.PI / 2, "XYZ")); // WristRight


    threeObjToKinectObj[12] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -Math.PI, Math.PI/2, "XYZ")); // HipLeft --- 0が入るべき
    threeObjToKinectObj[13] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI + Math.PI / 2, Math.PI, "XYZ")); // KneeLeft
    threeObjToKinectObj[14] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -Math.PI / 2, Math.PI, "XYZ")); // AnkleLeft
    threeObjToKinectObj[15] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -Math.PI / 2, Math.PI, "XYZ")); // AnkleLeft

    threeObjToKinectObj[16] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI, -Math.PI / 2, "XYZ")); // HipRight ---- 0が入るべき
    threeObjToKinectObj[17] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, -Math.PI - Math.PI / 2, -Math.PI, "XYZ")); // KneeRight
    threeObjToKinectObj[18] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI / 2, -Math.PI, "XYZ")); // AnkleRight
    threeObjToKinectObj[19] = new THREE.Quaternion().setFromEuler(new THREE.Euler(0, Math.PI / 2, -Math.PI, "XYZ")); // AnkleRight

    var three_rotq2 = new Array(25);
    for (var i = 0; i < three_rotq2.length; i++) {
      if (!kinectAbs_rotq[i]) continue;
      if (!threeObjToKinectObj[i]) continue;
      three_rotq2[i] = new THREE.Quaternion().multiplyQuaternions(three_rotq[i], threeObjToKinectObj[i]);
    }

    // 3. three_abs -> three_rel: オブジェクト変換
    var three_rotq3 = new Array(25);
    three_rotq3[0] = new THREE.Quaternion().multiplyQuaternions(new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0, "XYZ")), three_rotq2[0]);
    three_rotq3[1] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[0].inverse(), three_rotq2[1]); // model-SpineBase
    three_rotq3[2] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[1].inverse(), three_rotq2[20]); //
    three_rotq3[3] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[20].inverse(), three_rotq2[2]);
    if (three_rotq3[3]) {
      // face の座標はないときがある
      three_rotq3[4] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[2].inverse(), three_rotq2[3]); // head
    }

    three_rotq3[5] = erot; // SL --- 0が入るべき
    // three_rotq3[5] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[20].inverse(), three_rotq2[4]); // SL --- 0が入るべき
    three_rotq3[6] = new THREE.Quaternion().multiplyQuaternions(erot, three_rotq2[5]); // EL
    three_rotq3[7] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[5].inverse(), three_rotq2[6]); // WL
    three_rotq3[8] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[6].inverse(), three_rotq2[7]); // WL
    
    // shoulderは回らないので( 0, 0, 0, 0 )
    three_rotq3[11] = erot; // SR --- 0が入るべき
    // three_rotq3[11] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[20].inverse(), three_rotq2[8]); // SR --- 0が入るべき
    three_rotq3[12] = new THREE.Quaternion().multiplyQuaternions(erot, three_rotq2[9]); // ER
    three_rotq3[13] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[9].inverse(), three_rotq2[10]); // WR
    three_rotq3[14] = new THREE.Quaternion().multiplyQuaternions(three_rotq2[10].inverse(), three_rotq2[11]); // WR
    
    three_rotq3[17] = erot; // HL --- 0が入るべき
    // three_rotq3[18] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[20].inverse(), three_rotq2[13] ); // KR
    three_rotq3[18] = new THREE.Quaternion().multiplyQuaternions( erot, three_rotq2[13] ); // KL
    three_rotq3[19] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[13].inverse(), three_rotq2[14] ); // AL
    three_rotq3[20] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[14].inverse(), three_rotq2[15] ); // AL

    three_rotq3[21] = erot; // HR --- 0が入るべき
    // three_rotq3[22] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[16].inverse(), three_rotq2[17] ); // KR
    three_rotq3[22] = new THREE.Quaternion().multiplyQuaternions( erot, three_rotq2[17] ); // KR
    three_rotq3[23] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[17].inverse(), three_rotq2[18] ); // AR
    three_rotq3[24] = new THREE.Quaternion().multiplyQuaternions( three_rotq2[18].inverse(), three_rotq2[19] ); // AR


    for (var j = 0; j < 25; j++) {
        mesh.skeleton.bones[j].quaternion.copy( erot );
    }

    mesh.skeleton.bones[0].quaternion.copy( three_rotq3[0] );
    mesh.skeleton.bones[1].quaternion.copy( three_rotq3[1] );
    mesh.skeleton.bones[2].quaternion.copy( three_rotq3[2] );
    mesh.skeleton.bones[3].quaternion.copy( three_rotq3[3] );
    if(three_rotq3[4]){
      mesh.skeleton.bones[4].quaternion.copy( three_rotq3[4] );
    }

    mesh.skeleton.bones[5].quaternion.copy( three_rotq3[5] ); // 0であるべき
    mesh.skeleton.bones[6].quaternion.copy( three_rotq3[6] ); // 肩の回転が入っている
    mesh.skeleton.bones[7].quaternion.copy( three_rotq3[7] ); // 肘の回転が入っているべき
    // 手首の回転を入れる

    mesh.skeleton.bones[11].quaternion.copy( three_rotq3[11] ); // 0であるべき
    mesh.skeleton.bones[12].quaternion.copy( three_rotq3[12] );
    mesh.skeleton.bones[13].quaternion.copy( three_rotq3[13] );
    // 手首の回転を入れる

    mesh.skeleton.bones[17].quaternion.copy( three_rotq3[17] ); // 0であるべき
    mesh.skeleton.bones[18].quaternion.copy( three_rotq3[18] );
    mesh.skeleton.bones[19].quaternion.copy( three_rotq3[19] );
    mesh.skeleton.bones[20].quaternion.copy( three_rotq3[20] );

    mesh.skeleton.bones[21].quaternion.copy( three_rotq3[21] ); // 0であるべき
    mesh.skeleton.bones[22].quaternion.copy( three_rotq3[22] );
    mesh.skeleton.bones[23].quaternion.copy( three_rotq3[23] );
    mesh.skeleton.bones[24].quaternion.copy( three_rotq3[24] );
  }



  function render() {
    // ゆっくり再生させるために、1frameを3倍の時間で再生
    count++;
    if( current_frame < end_frame-1 ){
      if( count % 3 == 0 )
        current_frame++;
      $("input.btn.btn-info").prop("disabled", true);
    } else {
      if($("input[name='answer[eval1]']:checked").val() && $("input[name='answer[eval2]']:checked").val() && $("input[name='answer[eval3]']:checked").val()&& $("input[name='answer[eval4]']:checked").val() ){
        $("input.btn.btn-info").prop("disabled", false);
      }
    }
    var percent = (current_frame/(end_frame-10))*100;
    // console.log( percent );
    $(".progress-bar").css({'width': percent+'%'});
    
    var kinect_add_frame = 0;
    var mocap_add_frame = 0;
    var both_add_frame = 0;
    
    convert_kinect_to_three( motion_data[current_frame + kinect_add_frame + both_add_frame  ], mesh );

    requestAnimationFrame( render );

    webglrenderer.render( scene, webglcamera );
  }

</script>

